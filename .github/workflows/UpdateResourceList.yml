name: Update Resource List

on:
  workflow_dispatch:  # 手动触发
  release:
    types: [edited, deleted, published, unpublished]  # 当release发生变动时触发

jobs:
  update-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

      - name: Checkout list branch
        run: |
          git checkout list || git checkout -b list

      - name: Generate resource list from releases
        run: |
          import os
          import yaml
          import subprocess
          import requests
          from pathlib import Path

          # 配置
          LIST_FILE = 'package-list.yaml'
          # 从环境变量获取仓库信息
          repo_full = os.environ.get('GITHUB_REPOSITORY')
          if not repo_full:
              raise ValueError("GITHUB_REPOSITORY environment variable not set")
              
          parts = repo_full.split('/')
          if len(parts) != 2:
              raise ValueError(f"Invalid repository format: {repo_full}")
              
          REPO_OWNER, REPO_NAME = parts
          
          GITHUB_TOKEN = os.environ.get('GITHUB_TOKEN')
          if not GITHUB_TOKEN:
              raise ValueError("GITHUB_TOKEN environment variable not set")

          # 获取所有release
          def get_all_releases():
              releases = []
              url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/releases?per_page=100"
              
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              
              while url:
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  releases.extend(response.json())
                  
                  # 处理分页
                  links = response.headers.get('link', '')
                  url = None
                  for link in links.split(','):
                      if 'rel="next"' in link:
                          url = link.split(';')[0].strip('<>')
                          break
              
              return releases

          # 收集所有资源信息
          resources = []
          
          # 只处理releases
          print("Processing releases...")
          releases = get_all_releases()
          for release in releases:
              try:
                  # 跳过草稿版本
                  if release.get('draft', False):
                      print(f"Skipping draft release: {release.get('tag_name')}")
                      continue
                  
                  # 跳过预发布版本
                  if release.get('prerelease', False):
                      print(f"Skipping prerelease: {release.get('tag_name')}")
                      continue
                  
                  tag_name = release['tag_name']
                  
                  package_url = f"{os.environ['GITHUB_SERVER_URL']}/{os.environ['GITHUB_REPOSITORY']}/raw/{tag_name}/package.yaml"
                  
                  zip_file_name = None
                  
                  # 遍历所有资产，寻找zip文件
                  for asset in release.get('assets', []):
                      # 查找zip文件
                      if asset['name'].endswith('.zip'):
                          zip_file_name = asset['name']
                          # 下载package.yaml
                          response = requests.get(package_url)
                          response.raise_for_status()
                          # 解析package.yaml
                          package_data = yaml.safe_load(response.text) or {}
                          package_yaml_found = True
                  
                  # 确保找到了package.yaml和zip文件
                  if not package_yaml_found:
                      print(f"Warning: package.yaml not found in release {tag_name}, skipping")
                      continue
                  
                  if not zip_file_name:
                      print(f"Warning: zip file not found in release {tag_name}, skipping")
                      continue
                  
                  # 提取metadata信息
                  metadata = package_data.get('metadata', {})
                  
                  # 创建资源条目，组合tag名和文件名
                  resource = {
                      'version': metadata.get('version', tag_name),
                      'hidden': False,
                      'pangee_cluster_version': metadata.get('pangee_cluster_version', {}),
                      'tag_name': tag_name,
                      'file_name': zip_file_name
                  }
                  
                  resources.append(resource)
                  print(f"Added resource from release: {tag_name} with path: {tag_name}/{zip_file_name}")
              
              except Exception as e:
                  print(f"Error processing release {release.get('tag_name')}: {str(e)}, skipping")
                  continue

          # 切换回list分支准备更新
          subprocess.run(['git', 'checkout', 'list'], capture_output=True, check=True)

          # 创建完整的资源列表结构
          resource_list = {
              'kind': 'pangee-cluster-resource-package-list',
              'items': resources
          }

          # 保存更新后的列表
          with open(LIST_FILE, 'w') as f:
              yaml.safe_dump(resource_list, f, sort_keys=False)

          print(f"Generated resource list with {len(resources)} items")
        shell: python
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 提供GitHub API访问令牌

      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Refresh resource list from releases" || exit 0
          git push origin list
